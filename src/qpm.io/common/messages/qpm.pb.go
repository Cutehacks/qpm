// Code generated by protoc-gen-go.
// source: qpm.proto
// DO NOT EDIT!

/*
Package messages is a generated protocol buffer package.

It is generated from these files:
	qpm.proto

It has these top-level messages:
	DependencyMessage
	Package
	Dependency
	VersionInfo
	SearchResult
	PingRequest
	PingResponse
	PublishRequest
	PublishResponse
	DependencyRequest
	DependencyResponse
	SearchRequest
	SearchResponse
	ListRequest
	ListResponse
	LoginRequest
	LoginResponse
	InfoRequest
	InfoResponse
	LicenseRequest
	LicenseResponse
*/
package messages

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type RepoType int32

const (
	RepoType_AUTO   RepoType = 0
	RepoType_GITHUB RepoType = 1
)

var RepoType_name = map[int32]string{
	0: "AUTO",
	1: "GITHUB",
}
var RepoType_value = map[string]int32{
	"AUTO":   0,
	"GITHUB": 1,
}

func (x RepoType) String() string {
	return proto.EnumName(RepoType_name, int32(x))
}

// The values in this enum should correspond to an SPDX identifier
type LicenseType int32

const (
	LicenseType_NONE         LicenseType = 0
	LicenseType_MIT          LicenseType = 1
	LicenseType_AGPL_3_0     LicenseType = 2
	LicenseType_APACHE_2_0   LicenseType = 3
	LicenseType_ARTISTIC_2_0 LicenseType = 4
	LicenseType_BSD_2_CLAUSE LicenseType = 5
	LicenseType_BSD_3_CLAUSE LicenseType = 6
	LicenseType_CC0_1_0      LicenseType = 7
	LicenseType_EPL_1_0      LicenseType = 8
	LicenseType_GPL_2_0      LicenseType = 9
	LicenseType_GPL_3_0      LicenseType = 10
	LicenseType_ISC          LicenseType = 11
	LicenseType_LGPL_2_1     LicenseType = 12
	LicenseType_LGPL_3_0     LicenseType = 13
	LicenseType_UNLICENSE    LicenseType = 14
	LicenseType_MPL_2_0      LicenseType = 15
)

var LicenseType_name = map[int32]string{
	0:  "NONE",
	1:  "MIT",
	2:  "AGPL_3_0",
	3:  "APACHE_2_0",
	4:  "ARTISTIC_2_0",
	5:  "BSD_2_CLAUSE",
	6:  "BSD_3_CLAUSE",
	7:  "CC0_1_0",
	8:  "EPL_1_0",
	9:  "GPL_2_0",
	10: "GPL_3_0",
	11: "ISC",
	12: "LGPL_2_1",
	13: "LGPL_3_0",
	14: "UNLICENSE",
	15: "MPL_2_0",
}
var LicenseType_value = map[string]int32{
	"NONE":         0,
	"MIT":          1,
	"AGPL_3_0":     2,
	"APACHE_2_0":   3,
	"ARTISTIC_2_0": 4,
	"BSD_2_CLAUSE": 5,
	"BSD_3_CLAUSE": 6,
	"CC0_1_0":      7,
	"EPL_1_0":      8,
	"GPL_2_0":      9,
	"GPL_3_0":      10,
	"ISC":          11,
	"LGPL_2_1":     12,
	"LGPL_3_0":     13,
	"UNLICENSE":    14,
	"MPL_2_0":      15,
}

func (x LicenseType) String() string {
	return proto.EnumName(LicenseType_name, int32(x))
}

type MessageType int32

const (
	MessageType_INFO    MessageType = 0
	MessageType_WARNING MessageType = 1
	MessageType_ERROR   MessageType = 2
)

var MessageType_name = map[int32]string{
	0: "INFO",
	1: "WARNING",
	2: "ERROR",
}
var MessageType_value = map[string]int32{
	"INFO":    0,
	"WARNING": 1,
	"ERROR":   2,
}

func (x MessageType) String() string {
	return proto.EnumName(MessageType_name, int32(x))
}

type DependencyMessage struct {
	Type   MessageType `protobuf:"varint,1,opt,name=type,enum=messages.MessageType" json:"type,omitempty"`
	Title  string      `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	Body   string      `protobuf:"bytes,3,opt,name=body" json:"body,omitempty"`
	Prompt bool        `protobuf:"varint,4,opt,name=prompt" json:"prompt,omitempty"`
}

func (m *DependencyMessage) Reset()         { *m = DependencyMessage{} }
func (m *DependencyMessage) String() string { return proto.CompactTextString(m) }
func (*DependencyMessage) ProtoMessage()    {}

type Package struct {
	Name         string              `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Description  string              `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
	Author       *Package_Author     `protobuf:"bytes,3,opt,name=author" json:"author,omitempty"`
	Repository   *Package_Repository `protobuf:"bytes,4,opt,name=repository" json:"repository,omitempty"`
	Version      *Package_Version    `protobuf:"bytes,5,opt,name=version" json:"version,omitempty"`
	Dependencies []string            `protobuf:"bytes,6,rep,name=dependencies" json:"dependencies,omitempty"`
	License      LicenseType         `protobuf:"varint,7,opt,name=license,enum=messages.LicenseType" json:"license,omitempty"`
	PriFilename  string              `protobuf:"bytes,8,opt,name=pri_filename" json:"pri_filename,omitempty"`
	Webpage      string              `protobuf:"bytes,10,opt,name=webpage" json:"webpage,omitempty"`
	Plugins      []*Package_Plugin   `protobuf:"bytes,11,rep,name=plugins" json:"plugins,omitempty"`
	Headers      []string            `protobuf:"bytes,12,rep,name=headers" json:"headers,omitempty"`
	QbsFilename  string              `protobuf:"bytes,13,opt,name=qbs_filename" json:"qbs_filename,omitempty"`
}

func (m *Package) Reset()         { *m = Package{} }
func (m *Package) String() string { return proto.CompactTextString(m) }
func (*Package) ProtoMessage()    {}

func (m *Package) GetAuthor() *Package_Author {
	if m != nil {
		return m.Author
	}
	return nil
}

func (m *Package) GetRepository() *Package_Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

func (m *Package) GetVersion() *Package_Version {
	if m != nil {
		return m.Version
	}
	return nil
}

func (m *Package) GetPlugins() []*Package_Plugin {
	if m != nil {
		return m.Plugins
	}
	return nil
}

type Package_Repository struct {
	Type RepoType `protobuf:"varint,1,opt,name=type,enum=messages.RepoType" json:"type,omitempty"`
	Url  string   `protobuf:"bytes,2,opt,name=url" json:"url,omitempty"`
}

func (m *Package_Repository) Reset()         { *m = Package_Repository{} }
func (m *Package_Repository) String() string { return proto.CompactTextString(m) }
func (*Package_Repository) ProtoMessage()    {}

type Package_Version struct {
	Label       string `protobuf:"bytes,1,opt,name=label" json:"label,omitempty"`
	Revision    string `protobuf:"bytes,2,opt,name=revision" json:"revision,omitempty"`
	Fingerprint string `protobuf:"bytes,3,opt,name=fingerprint" json:"fingerprint,omitempty"`
}

func (m *Package_Version) Reset()         { *m = Package_Version{} }
func (m *Package_Version) String() string { return proto.CompactTextString(m) }
func (*Package_Version) ProtoMessage()    {}

type Package_Author struct {
	Name  string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Email string `protobuf:"bytes,2,opt,name=email" json:"email,omitempty"`
}

func (m *Package_Author) Reset()         { *m = Package_Author{} }
func (m *Package_Author) String() string { return proto.CompactTextString(m) }
func (*Package_Author) ProtoMessage()    {}

type Package_Plugin struct {
	Class string `protobuf:"bytes,1,opt,name=class" json:"class,omitempty"`
	Uri   string `protobuf:"bytes,2,opt,name=uri" json:"uri,omitempty"`
}

func (m *Package_Plugin) Reset()         { *m = Package_Plugin{} }
func (m *Package_Plugin) String() string { return proto.CompactTextString(m) }
func (*Package_Plugin) ProtoMessage()    {}

type Dependency struct {
	Name       string              `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Repository *Package_Repository `protobuf:"bytes,2,opt,name=repository" json:"repository,omitempty"`
	Version    *Package_Version    `protobuf:"bytes,3,opt,name=version" json:"version,omitempty"`
}

func (m *Dependency) Reset()         { *m = Dependency{} }
func (m *Dependency) String() string { return proto.CompactTextString(m) }
func (*Dependency) ProtoMessage()    {}

func (m *Dependency) GetRepository() *Package_Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

func (m *Dependency) GetVersion() *Package_Version {
	if m != nil {
		return m.Version
	}
	return nil
}

type VersionInfo struct {
	Version       *Package_Version `protobuf:"bytes,1,opt,name=version" json:"version,omitempty"`
	DatePublished string           `protobuf:"bytes,2,opt,name=date_published" json:"date_published,omitempty"`
}

func (m *VersionInfo) Reset()         { *m = VersionInfo{} }
func (m *VersionInfo) String() string { return proto.CompactTextString(m) }
func (*VersionInfo) ProtoMessage()    {}

func (m *VersionInfo) GetVersion() *Package_Version {
	if m != nil {
		return m.Version
	}
	return nil
}

type SearchResult struct {
	Name        string          `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Version     string          `protobuf:"bytes,2,opt,name=version" json:"version,omitempty"`
	Author      *Package_Author `protobuf:"bytes,3,opt,name=author" json:"author,omitempty"`
	Description string          `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
	License     LicenseType     `protobuf:"varint,5,opt,name=license,enum=messages.LicenseType" json:"license,omitempty"`
}

func (m *SearchResult) Reset()         { *m = SearchResult{} }
func (m *SearchResult) String() string { return proto.CompactTextString(m) }
func (*SearchResult) ProtoMessage()    {}

func (m *SearchResult) GetAuthor() *Package_Author {
	if m != nil {
		return m.Author
	}
	return nil
}

type PingRequest struct {
}

func (m *PingRequest) Reset()         { *m = PingRequest{} }
func (m *PingRequest) String() string { return proto.CompactTextString(m) }
func (*PingRequest) ProtoMessage()    {}

type PingResponse struct {
}

func (m *PingResponse) Reset()         { *m = PingResponse{} }
func (m *PingResponse) String() string { return proto.CompactTextString(m) }
func (*PingResponse) ProtoMessage()    {}

type PublishRequest struct {
	PackageDescription *Package `protobuf:"bytes,1,opt,name=package_description" json:"package_description,omitempty"`
	Token              string   `protobuf:"bytes,2,opt,name=token" json:"token,omitempty"`
}

func (m *PublishRequest) Reset()         { *m = PublishRequest{} }
func (m *PublishRequest) String() string { return proto.CompactTextString(m) }
func (*PublishRequest) ProtoMessage()    {}

func (m *PublishRequest) GetPackageDescription() *Package {
	if m != nil {
		return m.PackageDescription
	}
	return nil
}

type PublishResponse struct {
}

func (m *PublishResponse) Reset()         { *m = PublishResponse{} }
func (m *PublishResponse) String() string { return proto.CompactTextString(m) }
func (*PublishResponse) ProtoMessage()    {}

type DependencyRequest struct {
	PackageNames  []string    `protobuf:"bytes,1,rep,name=package_names" json:"package_names,omitempty"`
	CompatLicense LicenseType `protobuf:"varint,4,opt,name=compat_license,enum=messages.LicenseType" json:"compat_license,omitempty"`
}

func (m *DependencyRequest) Reset()         { *m = DependencyRequest{} }
func (m *DependencyRequest) String() string { return proto.CompactTextString(m) }
func (*DependencyRequest) ProtoMessage()    {}

type DependencyResponse struct {
	Dependencies []*Dependency        `protobuf:"bytes,1,rep,name=dependencies" json:"dependencies,omitempty"`
	Messages     []*DependencyMessage `protobuf:"bytes,2,rep,name=messages" json:"messages,omitempty"`
}

func (m *DependencyResponse) Reset()         { *m = DependencyResponse{} }
func (m *DependencyResponse) String() string { return proto.CompactTextString(m) }
func (*DependencyResponse) ProtoMessage()    {}

func (m *DependencyResponse) GetDependencies() []*Dependency {
	if m != nil {
		return m.Dependencies
	}
	return nil
}

func (m *DependencyResponse) GetMessages() []*DependencyMessage {
	if m != nil {
		return m.Messages
	}
	return nil
}

type SearchRequest struct {
	PackageName string `protobuf:"bytes,1,opt,name=package_name" json:"package_name,omitempty"`
}

func (m *SearchRequest) Reset()         { *m = SearchRequest{} }
func (m *SearchRequest) String() string { return proto.CompactTextString(m) }
func (*SearchRequest) ProtoMessage()    {}

type SearchResponse struct {
	Results []*SearchResult `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
}

func (m *SearchResponse) Reset()         { *m = SearchResponse{} }
func (m *SearchResponse) String() string { return proto.CompactTextString(m) }
func (*SearchResponse) ProtoMessage()    {}

func (m *SearchResponse) GetResults() []*SearchResult {
	if m != nil {
		return m.Results
	}
	return nil
}

type ListRequest struct {
}

func (m *ListRequest) Reset()         { *m = ListRequest{} }
func (m *ListRequest) String() string { return proto.CompactTextString(m) }
func (*ListRequest) ProtoMessage()    {}

type ListResponse struct {
	Results []*SearchResult `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
}

func (m *ListResponse) Reset()         { *m = ListResponse{} }
func (m *ListResponse) String() string { return proto.CompactTextString(m) }
func (*ListResponse) ProtoMessage()    {}

func (m *ListResponse) GetResults() []*SearchResult {
	if m != nil {
		return m.Results
	}
	return nil
}

type LoginRequest struct {
	Email    string `protobuf:"bytes,1,opt,name=email" json:"email,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
	Create   bool   `protobuf:"varint,3,opt,name=create" json:"create,omitempty"`
}

func (m *LoginRequest) Reset()         { *m = LoginRequest{} }
func (m *LoginRequest) String() string { return proto.CompactTextString(m) }
func (*LoginRequest) ProtoMessage()    {}

type LoginResponse struct {
	Token string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
}

func (m *LoginResponse) Reset()         { *m = LoginResponse{} }
func (m *LoginResponse) String() string { return proto.CompactTextString(m) }
func (*LoginResponse) ProtoMessage()    {}

type InfoRequest struct {
	PackageName string `protobuf:"bytes,1,opt,name=package_name" json:"package_name,omitempty"`
}

func (m *InfoRequest) Reset()         { *m = InfoRequest{} }
func (m *InfoRequest) String() string { return proto.CompactTextString(m) }
func (*InfoRequest) ProtoMessage()    {}

type InfoResponse struct {
	Package      *Package       `protobuf:"bytes,1,opt,name=package" json:"package,omitempty"`
	Versions     []*VersionInfo `protobuf:"bytes,2,rep,name=versions" json:"versions,omitempty"`
	Dependencies []*Dependency  `protobuf:"bytes,3,rep,name=dependencies" json:"dependencies,omitempty"`
}

func (m *InfoResponse) Reset()         { *m = InfoResponse{} }
func (m *InfoResponse) String() string { return proto.CompactTextString(m) }
func (*InfoResponse) ProtoMessage()    {}

func (m *InfoResponse) GetPackage() *Package {
	if m != nil {
		return m.Package
	}
	return nil
}

func (m *InfoResponse) GetVersions() []*VersionInfo {
	if m != nil {
		return m.Versions
	}
	return nil
}

func (m *InfoResponse) GetDependencies() []*Dependency {
	if m != nil {
		return m.Dependencies
	}
	return nil
}

type LicenseRequest struct {
	Package *Package `protobuf:"bytes,1,opt,name=package" json:"package,omitempty"`
}

func (m *LicenseRequest) Reset()         { *m = LicenseRequest{} }
func (m *LicenseRequest) String() string { return proto.CompactTextString(m) }
func (*LicenseRequest) ProtoMessage()    {}

func (m *LicenseRequest) GetPackage() *Package {
	if m != nil {
		return m.Package
	}
	return nil
}

type LicenseResponse struct {
	Body string `protobuf:"bytes,1,opt,name=body" json:"body,omitempty"`
}

func (m *LicenseResponse) Reset()         { *m = LicenseResponse{} }
func (m *LicenseResponse) String() string { return proto.CompactTextString(m) }
func (*LicenseResponse) ProtoMessage()    {}

func init() {
	proto.RegisterType((*DependencyMessage)(nil), "messages.DependencyMessage")
	proto.RegisterType((*Package)(nil), "messages.Package")
	proto.RegisterType((*Package_Repository)(nil), "messages.Package.Repository")
	proto.RegisterType((*Package_Version)(nil), "messages.Package.Version")
	proto.RegisterType((*Package_Author)(nil), "messages.Package.Author")
	proto.RegisterType((*Package_Plugin)(nil), "messages.Package.Plugin")
	proto.RegisterType((*Dependency)(nil), "messages.Dependency")
	proto.RegisterType((*VersionInfo)(nil), "messages.VersionInfo")
	proto.RegisterType((*SearchResult)(nil), "messages.SearchResult")
	proto.RegisterType((*PingRequest)(nil), "messages.PingRequest")
	proto.RegisterType((*PingResponse)(nil), "messages.PingResponse")
	proto.RegisterType((*PublishRequest)(nil), "messages.PublishRequest")
	proto.RegisterType((*PublishResponse)(nil), "messages.PublishResponse")
	proto.RegisterType((*DependencyRequest)(nil), "messages.DependencyRequest")
	proto.RegisterType((*DependencyResponse)(nil), "messages.DependencyResponse")
	proto.RegisterType((*SearchRequest)(nil), "messages.SearchRequest")
	proto.RegisterType((*SearchResponse)(nil), "messages.SearchResponse")
	proto.RegisterType((*ListRequest)(nil), "messages.ListRequest")
	proto.RegisterType((*ListResponse)(nil), "messages.ListResponse")
	proto.RegisterType((*LoginRequest)(nil), "messages.LoginRequest")
	proto.RegisterType((*LoginResponse)(nil), "messages.LoginResponse")
	proto.RegisterType((*InfoRequest)(nil), "messages.InfoRequest")
	proto.RegisterType((*InfoResponse)(nil), "messages.InfoResponse")
	proto.RegisterType((*LicenseRequest)(nil), "messages.LicenseRequest")
	proto.RegisterType((*LicenseResponse)(nil), "messages.LicenseResponse")
	proto.RegisterEnum("messages.RepoType", RepoType_name, RepoType_value)
	proto.RegisterEnum("messages.LicenseType", LicenseType_name, LicenseType_value)
	proto.RegisterEnum("messages.MessageType", MessageType_name, MessageType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for Qpm service

type QpmClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*PublishResponse, error)
	GetDependencies(ctx context.Context, in *DependencyRequest, opts ...grpc.CallOption) (*DependencyResponse, error)
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	Info(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoResponse, error)
	GetLicense(ctx context.Context, in *LicenseRequest, opts ...grpc.CallOption) (*LicenseResponse, error)
}

type qpmClient struct {
	cc *grpc.ClientConn
}

func NewQpmClient(cc *grpc.ClientConn) QpmClient {
	return &qpmClient{cc}
}

func (c *qpmClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := grpc.Invoke(ctx, "/messages.Qpm/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qpmClient) Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*PublishResponse, error) {
	out := new(PublishResponse)
	err := grpc.Invoke(ctx, "/messages.Qpm/Publish", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qpmClient) GetDependencies(ctx context.Context, in *DependencyRequest, opts ...grpc.CallOption) (*DependencyResponse, error) {
	out := new(DependencyResponse)
	err := grpc.Invoke(ctx, "/messages.Qpm/GetDependencies", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qpmClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := grpc.Invoke(ctx, "/messages.Qpm/Search", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qpmClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := grpc.Invoke(ctx, "/messages.Qpm/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qpmClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := grpc.Invoke(ctx, "/messages.Qpm/Login", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qpmClient) Info(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoResponse, error) {
	out := new(InfoResponse)
	err := grpc.Invoke(ctx, "/messages.Qpm/Info", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qpmClient) GetLicense(ctx context.Context, in *LicenseRequest, opts ...grpc.CallOption) (*LicenseResponse, error) {
	out := new(LicenseResponse)
	err := grpc.Invoke(ctx, "/messages.Qpm/GetLicense", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Qpm service

type QpmServer interface {
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	Publish(context.Context, *PublishRequest) (*PublishResponse, error)
	GetDependencies(context.Context, *DependencyRequest) (*DependencyResponse, error)
	Search(context.Context, *SearchRequest) (*SearchResponse, error)
	List(context.Context, *ListRequest) (*ListResponse, error)
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	Info(context.Context, *InfoRequest) (*InfoResponse, error)
	GetLicense(context.Context, *LicenseRequest) (*LicenseResponse, error)
}

func RegisterQpmServer(s *grpc.Server, srv QpmServer) {
	s.RegisterService(&_Qpm_serviceDesc, srv)
}

func _Qpm_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(QpmServer).Ping(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Qpm_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(PublishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(QpmServer).Publish(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Qpm_GetDependencies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(DependencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(QpmServer).GetDependencies(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Qpm_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(QpmServer).Search(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Qpm_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(QpmServer).List(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Qpm_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(QpmServer).Login(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Qpm_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(InfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(QpmServer).Info(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Qpm_GetLicense_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(LicenseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(QpmServer).GetLicense(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Qpm_serviceDesc = grpc.ServiceDesc{
	ServiceName: "messages.Qpm",
	HandlerType: (*QpmServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Qpm_Ping_Handler,
		},
		{
			MethodName: "Publish",
			Handler:    _Qpm_Publish_Handler,
		},
		{
			MethodName: "GetDependencies",
			Handler:    _Qpm_GetDependencies_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _Qpm_Search_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Qpm_List_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _Qpm_Login_Handler,
		},
		{
			MethodName: "Info",
			Handler:    _Qpm_Info_Handler,
		},
		{
			MethodName: "GetLicense",
			Handler:    _Qpm_GetLicense_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
